---
title: "Analysis"
author: "Sebastian Sosa"
format: html
editor: visual
---

## Dependencies

```{r}
#| message: false
#| warning: false
set.seed(1)
library(rptR)
library(lme4)
library(sjPlot)
library(ggplot2)
library(lmerTest)
library(survival)
library(survminer)
library(PerformanceAnalytics)
```

## Loading & exploring data

```{r}
load("MRQAP_data.RData")
d1=read.csv('reproduction data.csv')
d2=read.csv('survival data2.csv')
```

### Scaling data

```{r}
d1[,colnames(d1) %in% c("matSize",'sum_degree','sum_strength','sum_eigen','meanE','meanN','meanHRO')] = 
  apply(d1[,colnames(d1) %in% c("matSize",'sum_degree','sum_strength','sum_eigen','meanE','meanN','meanHRO')], 2, scale)
```

### Social network measure correlations

```{r}
chart.Correlation(d1[,colnames(d1) %in% c("sum_eigen", "sum_strength", "sum_degree")], histogram=TRUE, pch=19)
```

## Repetability

```{r}
#| message: false
#| warning: false
rep = rpt(formula = strength ~ (1|id), grname = "id", data = d1, datatype = "Gaussian", npermut = 10000)
rep
```

## MRQAP

```{r}
load("MRQAP_data.RData")
mrqap.mum = sample = NULL

for (a in 1:length(original.network)) {
  ids = Reduce(intersect, list(colnames(original.network[[a]]),
                               colnames(ped.mum[[a]]),
                               colnames(mat.HRO[[a]]),
                               colnames(mat.spde[[a]]),
                               colnames(mat.spdeX[[a]]),
                               colnames(mat.spdeY[[a]])))
  
  if(length(ids) <2){
    print(c("to few individuals in ", names(original.network)[a]))
    mrqap.mum[[a]] = NULL
    next
  }
  
  net = original.network[[a]][colnames(original.network [[a]]) %in% ids, colnames(original.network [[a]]) %in% ids]
  
  net = net[order(colnames(net)),order(colnames(net))]
  
  ped = ped.mum[[a]][colnames(ped.mum[[a]]) %in% ids, colnames(ped.mum[[a]]) %in% ids]
  ped = ped[order(colnames(ped)),order(colnames(ped))]
  
  hro = mat.HRO[[a]][colnames(mat.HRO[[a]]) %in% ids, colnames(mat.HRO[[a]]) %in% ids]
  hro = hro[order(colnames(hro)),order(colnames(hro))]
  
  spde = mat.spde[[a]][colnames(mat.spde[[a]]) %in% ids, colnames(mat.spde[[a]]) %in% ids]
  
  spdeX = mat.spdeX[[a]][colnames(mat.spdeX[[a]]) %in% ids, colnames(mat.spdeX[[a]]) %in% ids]
  
  spdeY = mat.spdeY[[a]][colnames(mat.spdeY[[a]]) %in% ids, colnames(mat.spdeY[[a]]) %in% ids]
  
  ped = ped[order(colnames(ped)),order(colnames(ped))]
  sample = c(sample,ncol(net))
  if(any(c(is.null(ncol(net)),
           is.null(ncol(ped)),
           is.null(ncol(hro )),
           is.null(ncol(spde))))){next()}
  
  if(any(c(all(net == 0),
           all(ped == 0),
           all(hro == 0),
           all(spde == 0)))){next()}
  mrqap.mum[[a]] = asnipe::mrqap.dsp(net ~ ped + hro + spdeX + spdeY)
  names(mrqap.mum)[a] = names(original.network)[a]
}


names(mrqap.mum)= names(original.network)
mrqap.mum = mrqap.mum[-1]
mrqap.p = lapply(mrqap.mum, function(x){
  c = x$P.values[2]
})
mrqap.p = unlist(mrqap.p)
names(mrqap.p) = names(mrqap.mum)

mrqap.coef = lapply(mrqap.mum, function(x){
  x$coefficients[2]
})
mrqap.coef= unlist(mrqap.coef)
names(mrqap.coef) = names(mrqap.mum)

t = ifelse(mrqap.p < 0.05, "singificant", "non singificant")
ggplot(data = NULL, aes(y = mrqap.coef, x= names(mrqap.coef), color = t))+geom_point()+geom_line()+theme(legend.position = "none")+ylab("Regression coefficients (red =  significantÂ value)")+xlab("Year")
```

## Life time reproductive success
### LRS
```{r}
#| label: LRS
m1=glmer(LRS~sum_strength+lifespan+matSize+meanE+meanN+meanHRO+(1|), family = poisson(), data = d1)
tab_model(m1, transform = NULL, show.se = TRUE, digits = 3)
```

```{r}
p1=plot_model(m1,type='pred', show.data = T, terms="sum_strength")+xlab('LTS')
p2=plot_model(m1,type='pred', show.data = T, terms="lifespan")+xlab('Lifespan')
p3=plot_model(m1,type='pred', show.data = T, terms="meanN")+xlab('East')
ggarrange(p1,p2,p3,nrow=1,ncol=3)
```




### LBS
```{r}
#| label: LBS
m2=glm(LBS~sum_strength+lifespan+matSize+meanE+meanN+meanHRO, family = poisson(), data = d1)

tab_model(m2, transform = NULL, show.se = TRUE, digits = 3)
```


## Survival analysis
```{r}
 fit.coxph <- coxph(Surv(time = d2$lifespan,d2$censoring) ~ strength + matriline + HRO2 + LifetimeE + LifetimeN, data = d2)
 summary(fit.coxph)
 
 
```

```{r}
summa = summary(d2$strength)
d2$strength2 = NULL
d2$strength2 = ifelse(d2$strength >= summa[[5]], "3rd Qu.", d2$strength)
d2$strength2 = ifelse(d2$strength >= summa[[2]] & d2$strength < summa[[5]], "mean", d2$strength2)
d2$strength2 = ifelse( d2$strength < summa[[2]], "1st Qu.", d2$strength2)
survfit(Surv(time = d2$lifespan)~strength2, data=d2)
p1 = ggsurvplot(
  survfit(
    Surv(
      time = d2$lifespan)~strength2, data=d2),
      data = d2, 
      fun = "event", 
      conf.int = TRUE, 
      risk.table = TRUE, 
      risk.table.col="strata", 
      ggtheme = theme_bw())+
  xlab("Age")
p1
```
